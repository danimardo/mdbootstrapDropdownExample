{"version":3,"sources":["../../../../../src/app/typescripts/pro/progressbars/progress-bars-module/progressbar.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,uBAAuB,EACvB,WAAW,EACX,KAAK,GACN,MAAM,eAAA,CAAgB;AAUvB;IAAA;QAEK,UAAK,GAAkC,SAAS,CAAC;QAE1C,WAAM,GAAG,CAAC,CAAC;QASX,iBAAY,GAAG,CAAC,CAAC;QAgBzB,SAAI,GAAyD,aAAa,CAAC;IAoC/E,CAAC;IAvDG,sBAAI,uCAAK;aAAT,cAAc,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aACnC,UAAU,CAAS,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;;OADlB;IAOnC,sBAAI,6CAAW;aAAf,cAAoB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;aAC/C,UAAgB,CAAS,IAAI,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;;OADlB;IAe/C,gDAAiB,GAAjB;QACI,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QAC/B,MAAM,CAAC,EAAC,SAAS,EAAE,YAAU,KAAK,MAAG,EAAC,CAAC;IAC3C,CAAC;IAMD,+CAAgB,GAAhB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YACzB,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;YACrC,MAAM,CAAC,EAAC,SAAS,EAAE,YAAU,KAAK,MAAG,EAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IAmBL,2BAAC;AAAD,CAjEA,AAiEC;;AAlBM,+BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,oCAAoC;gBAC9C,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;gBAC3C,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAElD,EAAG,EAAE;CACL,CAAC;AAEK,mCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,mCAAc,GAA2C;IAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,oBAAoB,EAAG,EAAE,EAAE;IACjF,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACjC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAE;CACtE,CAAC;AAIF,eAZe,CAAG,EAAQ,GAAM,EAAG,GAAM;IAAf,oBAAA,EAAA,OAAM;IAAG,oBAAA,EAAA,SAAM;IAarC,MAAM,CAZC,IAAA,CAAK,GAAC,CAAG,GAAC,EAAI,IAAA,CAAK,GAAC,CAAG,GAAC,EAAI,CAAA,CAAE,CAAC,CAAC;AAa3C,CAAC","file":"progressbar.component.js","sourceRoot":"","sourcesContent":["import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  HostBinding,\r\n  Input,\r\n} from '@angular/core';\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\r\n\r\n\r\n/**\r\n * <md-progress-bar> component.\r\n */\r\n\r\nexport class ProgressBarComponent {\r\n    /** Color of the progress bar. */\r\n     color: 'primary' | 'accent' | 'warn' = 'primary';\r\n\r\n    private _value = 0;\r\n\r\n    /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\r\n    \r\n\r\n    \r\n    get value() { return this._value; }\r\n    set value(v: number) { this._value = clamp(v || 0); }\r\n\r\n    private _bufferValue = 0;\r\n\r\n    /** Buffer value of the progress bar. Defaults to zero. */\r\n    \r\n    get bufferValue() { return this._bufferValue; }\r\n    set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\r\n\r\n    /**\r\n    * Mode of the progress bar.\r\n    *\r\n    * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\r\n    * 'determinate'.\r\n    * Mirrored to mode attribute.\r\n    */\r\n    \r\n    \r\n    mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\r\n\r\n    /** Gets the current transform value for the progress bar's primary indicator. */\r\n    _primaryTransform() {\r\n        const scale = this.value / 100;\r\n        return {transform: `scaleX(${scale})`};\r\n    }\r\n\r\n    /**\r\n    * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\r\n    * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\r\n    */\r\n    _bufferTransform() {\r\n        if (this.mode === 'buffer') {\r\n            const scale = this.bufferValue / 100;\r\n            return {transform: `scaleX(${scale})`};\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'mdb-progress-bar, mat-progress-bar',\r\n    templateUrl: './progressbar.component.html',\r\n    styleUrls: ['./progressbar.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },{ type: HostBinding, args: ['attr.mode', ] },],\n};\n}\r\n\r\n/** Clamps a value to be between two numbers, by default 0 and 100. */\r\nfunction clamp(v: number, min = 0, max = 100) {\r\n    return Math.max(min, Math.min(max, v));\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}