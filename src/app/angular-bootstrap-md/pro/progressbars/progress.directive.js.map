{"version":3,"sources":["../../../../src/app/typescripts/pro/progressbars/progress.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,WAAA,EAAa,KAAA,EAAM,MAAO,eAAA,CAAgB;AAO9D;IAAA;QAkBU,aAAQ,GAAG,IAAI,CAAC;QAEjB,SAAI,GAAU,EAAE,CAAC;QAEd,SAAI,GAAG,GAAG,CAAC;IAuBvB,CAAC;IAtCC,sBAAW,kCAAG;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aAED,UAAe,CAAS;YACxB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACZ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAiB;gBAChC,GAAG,CAAC,qBAAqB,EAAE,CAAC;YAChC,CAAC,CAAC,CAAC;QACL,CAAC;;;OAPA;IAeM,kCAAM,GAAb,UAAc,GAAiB;QAC7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC;QACxB,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAEM,qCAAS,GAAhB,UAAiB,GAAiB;QAChC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC;IAYH,wBAAC;AAAD,CA7CA,AA6CC;;AAXM,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,4BAA4B,EAAC,EAAG,EAAE;CACtE,CAAC;AAEK,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,gCAAc,GAA2C;IAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,UAAU,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACrE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAG,EAAE,EAAE;CAC/D,CAAC","file":"progress.directive.js","sourceRoot":"","sourcesContent":["import { Directive, HostBinding, Input } from '@angular/core';\r\n\r\nimport { BarComponent } from './bar.component';\r\n\r\n// todo: progress element conflict with bootstrap.css\r\n// todo: need hack: replace host element with div\r\n\r\nexport class ProgressDirective  {\r\n    /** if `true` changing value of progress bar will be animated (note: not supported by Bootstrap 4) */\r\n   public animate: boolean;\r\n\r\n  /** maximum total value of progress element */\r\n  \r\n  \r\n  public get max(): number {\r\n    return this._max;\r\n  }\r\n\r\n  public set max(v: number) {\r\n  this._max = v;\r\n    this.bars.forEach((bar: BarComponent) => {\r\n        bar.recalculatePercentage();\r\n    });\r\n  }\r\n\r\n   public addClass = true;\r\n\r\n  public bars: any[] = [];\r\n\r\n  protected _max = 100;\r\n\r\n  public addBar(bar: BarComponent): void {\r\n    if (!this.animate) {\r\n    bar.transition = 'none';\r\n    }\r\n    this.bars.push(bar);\r\n  }\r\n\r\n  public removeBar(bar: BarComponent): void {\r\n    this.bars.splice(this.bars.indexOf(bar), 1);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'mdbProgress, [mdbProgress]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'animate': [{ type: Input },],\n'max': [{ type: HostBinding, args: ['attr.max', ] },{ type: Input },],\n'addClass': [{ type: HostBinding, args: ['class.progress', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}