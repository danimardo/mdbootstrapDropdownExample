{"version":3,"sources":["../../../../../src/app/typescripts/pro/progressbars/progress-spinner-module/progress-spinner.component.ts"],"names":[],"mappings":"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","file":"progress-spinner.component.js","sourceRoot":"","sourcesContent":["import {\r\n    Component,\r\n    HostBinding,\r\n    ChangeDetectionStrategy,\r\n    OnDestroy,\r\n    Input,\r\n    ElementRef,\r\n    NgZone,\r\n    Renderer, Directive\r\n} from '@angular/core';\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n\r\n/** A single degree in radians. */\r\nconst DEGREE_IN_RADIANS = Math.PI / 180;\r\n/** Duration of the indeterminate animation. */\r\nconst DURATION_INDETERMINATE = 667;\r\n/** Duration of the indeterminate animation. */\r\nconst DURATION_DETERMINATE = 225;\r\n/** Start animation value of the indeterminate animation */\r\nconst startIndeterminate = 3;\r\n/** End animation value of the indeterminate animation */\r\nconst endIndeterminate = 80;\r\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\r\nconst MAX_ANGLE = 359.99 / 100;\r\n\r\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n\r\ntype EasingFn = (currentTime: number, startValue: number,\r\n                 changeInValue: number, duration: number) => number;\r\n\r\n/**\r\n* Directive whose purpose is to add the mat- CSS styling to this selector.\r\n* @docs-private\r\n*/\r\n\r\nexport class MdProgressSpinnerCssMatStylerDirective {\r\n     true: any;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[mdbSpinners], mat-progress-spinner'\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'true': [{ type: HostBinding, args: ['class.mat-progress-spinner', ] },],\n};\n}\r\n\r\n\r\n/**\r\n* <md-progress-spinner> component.\r\n*/\r\n\r\n\r\nexport class MdProgressSpinnerComponent implements OnDestroy {\r\n    /** The id of the last requested animation. */\r\n    private _lastAnimationId = 0;\r\n\r\n    /** The id of the indeterminate interval. */\r\n    private _interdeterminateInterval: any;\r\n\r\n    /** The SVG <path> node that is used to draw the circle. */\r\n    private _path: SVGPathElement;\r\n\r\n    private _mode: ProgressSpinnerMode = 'determinate';\r\n    private _value: number;\r\n    private _color = 'primary';\r\n\r\n    /**\r\n    * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\r\n    * because voiceover does not report the progress indicator as indeterminate if the aria min\r\n    * and/or max value are number values.\r\n    */\r\n    get _ariaValueMin() {\r\n        return this.mode === 'determinate' ? 0 : null;\r\n    }\r\n\r\n    get _ariaValueMax() {\r\n        return this.mode === 'determinate' ? 100 : null;\r\n    }\r\n\r\n    /** @docs-private */\r\n    get interdeterminateInterval() {\r\n        return this._interdeterminateInterval;\r\n    }\r\n    /** @docs-private */\r\n    set interdeterminateInterval(interval) {\r\n        clearInterval(this._interdeterminateInterval);\r\n        this._interdeterminateInterval = interval;\r\n    }\r\n\r\n    /**\r\n    * Clean up any animations that were running.\r\n    */\r\n    ngOnDestroy() {\r\n        this._cleanupIndeterminateAnimation();\r\n    }\r\n\r\n    /** The color of the progress-spinner. Can be primary, accent, or warn. */\r\n    \r\n        get color(): string { return this._color; }\r\n        set color(value: string) {\r\n        this._updateColor(value);\r\n    }\r\n\r\n    /** Value of the progress circle. It is bound to the host as the attribute aria-valuenow. */\r\n    \r\n    \r\n    get value() {\r\n        if (this.mode === 'determinate') {\r\n            return this._value;\r\n        }\r\n    }\r\n    set value(v: number) {\r\n        if (v != null && this.mode === 'determinate') {\r\n            const newValue = clamp(v);\r\n            this._animateCircle(this.value || 0, newValue);\r\n            this._value = newValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Mode of the progress circle\r\n    *\r\n    * Input must be one of the values from ProgressMode, defaults to 'determinate'.\r\n    * mode is bound to the host as the attribute host.\r\n    */\r\n    \r\n    \r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n    set mode(mode: ProgressSpinnerMode) {\r\n        if (mode !== this._mode) {\r\n            if (mode === 'indeterminate') {\r\n                this._startIndeterminateAnimation();\r\n            } else {\r\n                this._cleanupIndeterminateAnimation();\r\n                this._animateCircle(0, this._value);\r\n            }\r\n        this._mode = mode;\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private _ngZone: NgZone,\r\n        private _elementRef: ElementRef,\r\n        private _renderer: Renderer\r\n    ) {}\r\n\r\n\r\n    /**\r\n    * Animates the circle from one percentage value to another.\r\n    *\r\n    * @param animateFrom The percentage of the circle filled starting the animation.\r\n    * @param animateTo The percentage of the circle filled ending the animation.\r\n    * @param ease The easing function to manage the pace of change in the animation.\r\n    * @param duration The length of time to show the animation, in milliseconds.\r\n    * @param rotation The starting angle of the circle fill, with 0° represented at the top center\r\n    *    of the circle.\r\n    */\r\n    private _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\r\n                            duration = DURATION_DETERMINATE, rotation = 0) {\r\n\r\n        const id = ++this._lastAnimationId;\r\n        const startTime = Date.now();\r\n        const changeInValue = animateTo - animateFrom;\r\n\r\n        // No need to animate it if the values are the same\r\n        if (animateTo === animateFrom) {\r\n            this._renderArc(animateTo, rotation);\r\n        } else {\r\n            const animation = () => {\r\n            const elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));\r\n\r\n            this._renderArc(\r\n                ease(elapsedTime, animateFrom, changeInValue, duration),\r\n                rotation\r\n            );\r\n\r\n            // Prevent overlapping animations by checking if a new animation has been called for and\r\n            // if the animation has lasted longer than the animation duration.\r\n            if (id === this._lastAnimationId && elapsedTime < duration) {\r\n                requestAnimationFrame(animation);\r\n            }\r\n        };\r\n\r\n        // Run the animation outside of Angular's zone, in order to avoid\r\n        // hitting ZoneJS and change detection on each frame.\r\n        this._ngZone.runOutsideAngular(animation);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * Starts the indeterminate animation interval, if it is not already running.\r\n    */\r\n    private _startIndeterminateAnimation() {\r\n        let rotationStartPoint = 0;\r\n        let start = startIndeterminate;\r\n        let end = endIndeterminate;\r\n        const duration = DURATION_INDETERMINATE;\r\n        const animate = () => {\r\n            this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\r\n            // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\r\n            rotationStartPoint = (rotationStartPoint + end) % 100;\r\n            const temp = start;\r\n            start = -end;\r\n            end = -temp;\r\n        };\r\n\r\n        if (!this.interdeterminateInterval) {\r\n            this._ngZone.runOutsideAngular(() => {\r\n                this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\r\n                animate();\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * Removes interval, ending the animation.\r\n    */\r\n    private _cleanupIndeterminateAnimation() {\r\n        this.interdeterminateInterval = null;\r\n    }\r\n\r\n    /**\r\n    * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\r\n    * DOM attribute on the `<path>`.\r\n    */\r\n    private _renderArc(currentValue: number, rotation = 0) {\r\n        // Caches the path reference so it doesn't have to be looked up every time.\r\n        const path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');\r\n\r\n        // Ensure that the path was found. This may not be the case if the\r\n        // animation function fires too early.\r\n        if (path) {\r\n            path.setAttribute('d', getSvgArc(currentValue, rotation));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Updates the color of the progress-spinner by adding the new palette class to the element\r\n    * and removing the old one.\r\n    */\r\n    private _updateColor(newColor: string) {\r\n        this._setElementColor(this._color, false);\r\n        this._setElementColor(newColor, true);\r\n        this._color = newColor;\r\n    }\r\n\r\n  /** Sets the given palette class on the component element. */\r\n    private _setElementColor(color: string, isAdd: boolean) {\r\n        if (color != null && color !== '') {\r\n            this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'mdb-Spinners, mat-progress-spinner',\r\n    templateUrl: 'progress-spinner.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\r\n\r\n\r\n/**\r\n * <md-spinner> component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate <md-progress-spinner> instance.\r\n */\r\n\r\nexport class MdSpinnerComponent extends MdProgressSpinnerComponent implements OnDestroy {\r\n\r\n     progressbar: any;\r\n     indeterminate: any;\r\n     true: any;\r\n\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer) {\r\n        super(ngZone, elementRef, renderer);\r\n        this.mode = 'indeterminate';\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\r\n        // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\r\n        super.ngOnDestroy();\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'mdb-spinners, mat-spinner, mdb-progress-spinner',\r\n    templateUrl: 'progress-spinner.component.html',\r\n    styleUrls: ['progress-spinner.component.scss'],\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'progressbar': [{ type: HostBinding, args: ['role', ] },],\n'indeterminate': [{ type: HostBinding, args: ['mode', ] },],\n'true': [{ type: HostBinding, args: ['class.mat-spinner', ] },],\n};\n}\r\n\r\n\r\n/**\r\n* Module functions.\r\n*/\r\n\r\n/** Clamps a value to be between 0 and 100. */\r\nfunction clamp(v: number) {\r\n    return Math.max(0, Math.min(100, v));\r\n}\r\n\r\n\r\n/**\r\n* Converts Polar coordinates to Cartesian.\r\n*/\r\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\r\n    const angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\r\n\r\n    return (radius + (pathRadius * Math.cos(angleInRadians))) +\r\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\r\n}\r\n\r\n\r\n/**\r\n* Easing function for linear animation.\r\n*/\r\nfunction linearEase(currentTime: number, startValue: number,\r\n                    changeInValue: number, duration: number) {\r\n    return changeInValue * currentTime / duration + startValue;\r\n}\r\n\r\n\r\n/**\r\n * Easing function to match material design indeterminate animation.\r\n */\r\nfunction materialEase(currentTime: number, startValue: number,\r\n                        changeInValue: number, duration: number) {\r\n    const time = currentTime / duration;\r\n    const timeCubed = Math.pow(time, 3);\r\n    const timeQuad = Math.pow(time, 4);\r\n    const timeQuint = Math.pow(time, 5);\r\n    return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\r\n}\r\n\r\n\r\n/**\r\n* Determines the path value to define the arc.  Converting percentage values to to polar\r\n* coordinates on the circle, and then to cartesian coordinates in the viewport.\r\n*\r\n* @param currentValue The current percentage value of the progress circle, the percentage of the\r\n*    circle to fill.\r\n* @param rotation The starting point of the circle with 0 being the 0 degree point.\r\n* @return A string for an SVG path representing a circle filled from the starting point to the\r\n*    percentage value provided.\r\n*/\r\nfunction getSvgArc(currentValue: number, rotation: number) {\r\n    const startPoint = rotation || 0;\r\n    const radius = 50;\r\n    const pathRadius = 40;\r\n\r\n    const startAngle = startPoint * MAX_ANGLE;\r\n    const endAngle = currentValue * MAX_ANGLE;\r\n    const start = polarToCartesian(radius, pathRadius, startAngle);\r\n    const end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\r\n    const arcSweep = endAngle < 0 ? 0 : 1;\r\n    let largeArcFlag: number;\r\n\r\n    if (endAngle < 0) {\r\n            largeArcFlag = endAngle >= -180 ? 0 : 1;\r\n    } else {\r\n            largeArcFlag = endAngle <= 180 ? 0 : 1;\r\n    }\r\n\r\n    return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}