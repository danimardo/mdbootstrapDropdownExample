{"version":3,"sources":["../../../../../src/app/typescripts/pro/alerts/toast/toast.config.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAgHvC;IAAA;IAA2B,CAAC;IAAD,mBAAC;AAAD,CAA3B,AAA4B,IAAA;;AAI5B;IAIE,sBACS,OAAe,EACf,MAAwB,EACxB,OAA0B,EAC1B,KAAa,EACb,SAAiB,EACjB,QAAuB;QALvB,YAAO,GAAP,OAAO,CAAQ;QACf,WAAM,GAAN,MAAM,CAAkB;QACxB,YAAO,GAAP,OAAO,CAAmB;QAC1B,UAAK,GAAL,KAAK,CAAQ;QACb,cAAS,GAAT,SAAS,CAAQ;QACjB,aAAQ,GAAR,QAAQ,CAAe;QATxB,WAAM,GAAiB,IAAI,OAAO,EAAE,CAAC;QACrC,cAAS,GAAiB,IAAI,OAAO,EAAE,CAAC;IAS5C,CAAC;IAGL,iCAAU,GAAV;QACE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAED,4BAAK,GAAL;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;IACpC,CAAC;IAGD,oCAAa,GAAb,UAAc,MAAY;QACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;IAED,+BAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IAEH,mBAAC;AAAD,CAjCA,AAiCC,IAAA","file":"toast.config.js","sourceRoot":"","sourcesContent":["/* tslint:disable:no-inferrable-types */\r\nimport { SafeHtml } from '@angular/platform-browser';\r\n\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { ComponentType } from '../portal/portal';\r\nimport { ToastComponent } from './toast.component';\r\nimport { ToastRef } from './toast.injector';\r\n\r\n/**\r\n * Configuration for an individual toast.\r\n */\r\n export interface IndividualConfig {\r\n  /**\r\n  * toast time to live in milliseconds\r\n  * default: 5000\r\n  */\r\n  timeOut?: number;\r\n  /**\r\n  * toast show close button\r\n  * default: false\r\n  */\r\n  closeButton?: boolean;\r\n  /** time to close after a user hovers over toast */\r\n  /**\r\n   * show toast progress bar\r\n   * default: false\r\n   */\r\n  extendedTimeOut?: number;\r\n  /**\r\n   * show toast progress bar\r\n   * default: false\r\n   */\r\n  progressBar?: boolean;\r\n  /**\r\n   * render html in toast message (possibly unsafe)\r\n   * default: false\r\n   */\r\n  enableHtml?: boolean;\r\n  /**\r\n   * css class on toast component\r\n   * default: toast\r\n   */\r\n  toastClass?: string;\r\n  /**\r\n   * css class on toast container\r\n   * default: toast-top-right\r\n   */\r\n  positionClass?: string;\r\n  /**\r\n   * css class on to toast title\r\n   * default: toast-title\r\n   */\r\n  titleClass?: string;\r\n  /**\r\n   * css class on to toast title\r\n   * default: toast-title\r\n   */\r\n  messageClass?: string;\r\n  /**\r\n   * clicking on toast dismisses it\r\n   * default: true\r\n   */\r\n  tapToDismiss?: boolean;\r\n  /**\r\n   * Angular toast component to be shown\r\n   * default: Toast\r\n   */\r\n  toastComponent?: ComponentType<any>;\r\n  /**\r\n   * Helps show toast from a websocket or from event outside Angular\r\n   * default: false\r\n   */\r\n  onActivateTick?: boolean;\r\n}\r\n\r\nexport interface ToastIconClasses {\r\n  error?: string;\r\n  info?: string;\r\n  success?: string;\r\n  warning?: string;\r\n}\r\n\r\n/**\r\n * Global Toast configuration\r\n * Includes all IndividualConfig\r\n */\r\nexport interface GlobalConfig extends IndividualConfig {\r\n  /**\r\n   * max toasts opened. Toasts will be queued\r\n   * Zero is unlimited\r\n   * default: 0\r\n   */\r\n  maxOpened?: number;\r\n  /**\r\n   * dismiss current toast when max is reached\r\n   * default: false\r\n   */\r\n  autoDismiss?: boolean;\r\n  iconClasses?: ToastIconClasses;\r\n  /**\r\n   * New toast placement\r\n   * default: true\r\n   */\r\n  newestOnTop?: boolean;\r\n  /**\r\n   * block duplicate messages\r\n   * default: false\r\n   */\r\n  preventDuplicates?: boolean;\r\n}\r\n/**\r\n * Remove warning message from angular-cli\r\n */\r\nexport class GlobalConfig {}\r\n/**\r\n * Everything a toast needs to launch\r\n */\r\nexport class ToastPackage {\r\n  private _onTap: Subject<any> = new Subject();\r\n  private _onAction: Subject<any> = new Subject();\r\n\r\n  constructor(\r\n    public toastId: number,\r\n    public config: IndividualConfig,\r\n    public message: string | SafeHtml,\r\n    public title: string,\r\n    public toastType: string,\r\n    public toastRef: ToastRef<any>,\r\n  ) { }\r\n\r\n  /** Fired on click */\r\n  triggerTap() {\r\n    this._onTap.next();\r\n    this._onTap.complete();\r\n  }\r\n\r\n  onTap(): Observable<any> {\r\n    return this._onTap.asObservable();\r\n  }\r\n\r\n  /** available for use in custom toast */\r\n  triggerAction(action?: any) {\r\n    this._onAction.next(action);\r\n    this._onAction.complete();\r\n  }\r\n\r\n  onAction(): Observable<any> {\r\n    return this._onAction.asObservable();\r\n  }\r\n\r\n}\r\n"]}