{"version":3,"sources":["../../../../../src/app/typescripts/pro/date-picker/directives/datepickerAutofill.directive.ts"],"names":[],"mappings":"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","file":"datepickerAutofill.directive.js","sourceRoot":"","sourcesContent":["import { Directive, ElementRef, Renderer, Input, HostListener } from '@angular/core';\r\nimport { IMyInputAutoFill } from '../interfaces/inputAutofill.interface';\r\n\r\nenum KeyCode {backspace = 8, delete = 46}\r\n\r\n\r\n\r\nexport class InputAutoFillDirective {\r\n   opts: IMyInputAutoFill;\r\n\r\n  constructor(private el: ElementRef, private rndr: Renderer) {}\r\n\r\n   onKeyUp(evt: KeyboardEvent) {\r\n    if (!this.opts.enabled || evt.keyCode === KeyCode.backspace || evt.keyCode === KeyCode.delete) {\r\n      return;\r\n    }\r\n\r\n    const val: string = this.getInputValue();\r\n    const ews: boolean = this.endsWith(val, this.opts.separator);\r\n    const parts: Array<string> = val.split(this.opts.separator);\r\n    const idx: number = parts.length - 1;\r\n\r\n    if (val.indexOf(this.opts.separator + this.opts.separator) !== -1 || idx > 2) {\r\n      return;\r\n    }\r\n\r\n    if (!ews &&\r\n      (val.length === this.getPartLength(0) ||\r\n        val.length === this.getPartLength(0) + this.getPartLength(1) + this.opts.separator.length)) {\r\n      this.setInputValue(val + this.opts.separator);\r\n  } else if (ews &&\r\n    parts[idx - 1].length < this.getPartLength(idx - 1) &&\r\n    this.isNumber(parts[idx - 1]) && (this.isDay(idx - 1) || this.isMonth(idx - 1))) {\r\n    this.setInputValue(this.insertPos(val, val.length - 2, '0'));\r\n  } else if (parts[idx].length < this.getPartLength(idx) &&\r\n    this.isNumber(parts[idx]) &&\r\n    (Number(parts[idx]) > 3 &&\r\n      this.isDay(idx) ||\r\n      Number(parts[idx]) > 1 &&\r\n      this.isMonth(idx))) {\r\n    this.setInputValue(this.insertPos(val, val.length - 1, '0') + (idx < 2 ? this.opts.separator : ''));\r\n  }\r\n}\r\n\r\n  private endsWith(val: string, suffix: string): boolean {\r\n    return val.indexOf(suffix, val.length - suffix.length) !== -1;\r\n  }\r\n\r\n  private insertPos(str: string, idx: number, val: string): string {\r\n    return str.substr(0, idx) + val + str.substr(idx);\r\n  }\r\n\r\n  private getPartLength(idx: number): number {\r\n    return this.opts.formatParts[idx].length;\r\n  }\r\n\r\n  private isNumber(val: string): boolean {\r\n    return val.match(/[1-9]/) !== null;\r\n  }\r\n\r\n  private isDay(idx: number): boolean {\r\n    return this.opts.formatParts[idx].indexOf('d') !== -1;\r\n  }\r\n\r\n  private isMonth(idx: number): boolean {\r\n    return this.opts.formatParts[idx].indexOf('m') !== -1 && this.opts.formatParts[idx].length === 2;\r\n  }\r\n\r\n  private getInputValue(): string {\r\n    return this.el.nativeElement.value;\r\n  }\r\n\r\n  private setInputValue(val: string): void {\r\n    this.rndr.setElementProperty(this.el.nativeElement, 'value', val);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdbInputAutoFill]'\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'opts': [{ type: Input },],\n'onKeyUp': [{ type: HostListener, args: ['keyup', ['$event'], ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}