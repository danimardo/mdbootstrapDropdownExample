{"version":3,"sources":["../../../../src/app/typescripts/pro/tags/chips.component.ts"],"names":[],"mappings":"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","file":"chips.component.js","sourceRoot":"","sourcesContent":["import { Component,\r\n         NgModule,\r\n         OnInit,\r\n         Input,\r\n         Output,\r\n         EventEmitter,\r\n         ElementRef,\r\n         forwardRef} from '@angular/core';\r\nimport {NgClass} from '@angular/common';\r\n\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\nconst noop = () => {\r\n};\r\n\r\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MaterialChipsComponent),\r\n  multi: true\r\n};\r\n\r\n\r\n\r\nexport class MaterialChipsComponent implements ControlValueAccessor {\r\n\r\n   public placeholder = '';\r\n\r\n  addAreaDisplayed: boolean;\r\n  isTagsFocused = false;\r\n  values: string[];\r\n  labelToAdd: string;\r\n  focused: string;\r\n  selected: string;\r\n\r\n   tagsfocusedChange = new EventEmitter();\r\n   labelsChange: EventEmitter<string[]> = new EventEmitter<string[]>();\r\n\r\n  \r\n  get tagsfocused() {\r\n    return this.isTagsFocused;\r\n  }\r\n\r\n  private onTouchedCallback: () => void = noop;\r\n  private onChangeCallback: (_: any) => void = noop;\r\n  registerOnChange(fn: any) { this.onChangeCallback = fn; }\r\n  registerOnTouched(fn: any) { this.onTouchedCallback = fn; }\r\n\r\n  removeValue(value: string) {\r\n    const index = this.values.indexOf(value, 0);\r\n    if (index !== undefined) {\r\n      this.values.splice(index, 1);\r\n      this.labelsChange.emit(this.values);\r\n    }\r\n  }\r\n\r\n  addValue(value: string) {\r\n    if (!value || value.trim() === '') { return; }\r\n    this.values.push(value);\r\n    this.labelsChange.emit(this.values);\r\n    this.labelToAdd = '';\r\n  }\r\n\r\n  // From ControlValueAccessor interface\r\n  writeValue(value: string[]) {\r\n    if (value !== this.values) {\r\n      this.values = value;\r\n    }\r\n  }\r\n\r\n  onFocus() {\r\n   this.focused = 'md-focused';\r\n   this.isTagsFocused = true;\r\n   // console.log('tags focused', this.isTagsFocused)\r\n   this.tagsfocusedChange.emit(this.isTagsFocused);\r\n  }\r\n  focusOutFunction() {\r\n    this.focused = '';\r\n    this.isTagsFocused = false;\r\n    // console.log('tags focused', this.isTagsFocused)\r\n    this.tagsfocusedChange.emit(this.isTagsFocused);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'mdb-material-chips',\r\n  templateUrl: 'chips.component.html',\r\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'placeholder': [{ type: Input, args: ['placeholder', ] },],\n'tagsfocusedChange': [{ type: Output },],\n'labelsChange': [{ type: Output },],\n'tagsfocused': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}