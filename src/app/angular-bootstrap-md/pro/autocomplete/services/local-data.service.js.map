{"version":3,"sources":["../../../../../src/app/typescripts/pro/autocomplete/services/local-data.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAE7C,OAAO,EAAE,iBAAA,EAAkB,MAAO,qBAAA,CAAsB;AAIxD;IAA+B,6BAAiB;IAK9C;eACE,iBAAO;IACT,CAAC;IAEM,wBAAI,GAAX,UAAY,IAA+B;QAA3C,iBAaC;QAZC,EAAE,CAAC,CAAC,IAAI,YAAY,UAAU,CAAC,CAAC,CAAC;YACX,IAAK,CAAC,SAAS,CAAC,UAAC,GAAG;gBACtC,KAAI,CAAC,KAAK,GAAG,GAAG,CAAC;gBACjB,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACnB,KAAI,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;gBAC9B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAU,IAAI,CAAC;QAC3B,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,0BAAM,GAAb,UAAc,IAAY;QACxB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAM,OAAO,GAAU,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC7D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;IAEM,iCAAa,GAApB,UAAqB,IAAS;QAC5B,MAAM,CAAC,iBAAM,aAAa,YAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAOH,gBAAC;AAAD,CA3CA,AA2CC,CA3C8B,iBAAiB;;AAqCzC,oBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AAEK,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"local-data.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { CompleterBaseData } from './base-data.service';\r\nimport { CompleterItem } from '../components/completer-item.component';\r\n\r\n\r\nexport class LocalData extends CompleterBaseData {\r\n\r\n  private _data: any[];\r\n  private savedTerm: string;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public data(data: any[] | Observable<any[]>) {\r\n    if (data instanceof Observable) {\r\n      (<Observable<any[]>>data).subscribe((res) => {\r\n        this._data = res;\r\n        if (this.savedTerm) {\r\n          this.search(this.savedTerm);\r\n        }\r\n      });\r\n    } else {\r\n      this._data = <any[]>data;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public search(term: string): void {\r\n    if (!this._data) {\r\n      this.savedTerm = term;\r\n    } else {\r\n      this.savedTerm = null;\r\n      const matches: any[] = this.extractMatches(this._data, term);\r\n      this.next(this.processResults(matches));\r\n    }\r\n  }\r\n\r\n  public convertToItem(data: any): CompleterItem {\r\n    return super.convertToItem(data);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}